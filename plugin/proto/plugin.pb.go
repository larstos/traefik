// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugin.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	plugin.proto

It has these top-level messages:
	Request
	Response
	HttpRequest
	HttpResponse
	Empty
	ValueList
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	// RequestUuid specifies the unique GUID for the given request.
	// It is useful for validating identity of a request when using
	// "around" plugin order to tie together "before" and "after"
	// parts of the remote plugin callback
	RequestUuid string `protobuf:"bytes,1,opt,name=request_uuid,json=requestUuid" json:"request_uuid,omitempty"`
	// Request contains the values of the HTTP Request made to the server
	Request *HttpRequest `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto1.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetRequestUuid() string {
	if m != nil {
		return m.RequestUuid
	}
	return ""
}

func (m *Request) GetRequest() *HttpRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

type Response struct {
	// Request contains the modified HTTP Request and all the values
	// will be synced back into original "http.Request" struct
	Request *HttpRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	// Response specifies values like response status code, response headers
	// and content payload
	Response *HttpResponse `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	// StopChain indicates that no further middleware handlers shall be called
	StopChain bool `protobuf:"varint,3,opt,name=stopChain" json:"stopChain,omitempty"`
	// RenderContent indicates that the value of "HttpResponse.Body" shoud be
	// rendered to the "http.ResponseWriter", which will also stop the chain,
	// similar to "StopChain" flag
	RenderContent bool `protobuf:"varint,4,opt,name=renderContent" json:"renderContent,omitempty"`
	// Redirect indicates that the request should be forwarded to the URL set by
	// "HttpRequest.Url" field, which will also stop the chain, similar to
	// "StopChain" flag
	Redirect bool `protobuf:"varint,5,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetRequest() *HttpRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Response) GetResponse() *HttpResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetStopChain() bool {
	if m != nil {
		return m.StopChain
	}
	return false
}

func (m *Response) GetRenderContent() bool {
	if m != nil {
		return m.RenderContent
	}
	return false
}

func (m *Response) GetRedirect() bool {
	if m != nil {
		return m.Redirect
	}
	return false
}

type HttpRequest struct {
	// Method specifies the HTTP method (GET, POST, PUT, etc.).
	// For client requests an empty string means GET.
	Method string `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	// URL specifies either the URI being requested (for server
	// requests) or the URL to access (for client requests).
	//
	// For server requests the URL is parsed from the URI
	// supplied on the Request-Line as stored in RequestURI.  For
	// most requests, fields other than Path and RawQuery will be
	// empty. (See RFC 2616, Section 5.1.2)
	//
	// For client requests, the URL's Host specifies the server to
	// connect to, while the Request's Host field optionally
	// specifies the Host header value to send in the HTTP
	// request.
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// The protocol version for incoming server requests.
	//
	// For client requests these fields are ignored. The HTTP
	// client code always uses either HTTP/1.1 or HTTP/2.
	// See the docs on Transport for details.
	Proto      string `protobuf:"bytes,3,opt,name=proto" json:"proto,omitempty"`
	ProtoMajor int32  `protobuf:"varint,4,opt,name=protoMajor" json:"protoMajor,omitempty"`
	ProtoMinor int32  `protobuf:"varint,5,opt,name=protoMinor" json:"protoMinor,omitempty"`
	// Header contains the request header fields either received
	// by the server or to be sent by the client.
	//
	// If a server received a request with header lines,
	//
	// 	Host: example.com
	// 	accept-encoding: gzip, deflate
	// 	Accept-Language: en-us
	// 	fOO: Bar
	// 	foo: two
	//
	// then
	//
	// 	Header = map[string]*proto.ValueList{
	// 		"Accept-Encoding": &proto.ValueList{Value: {"gzip, deflate"}},
	// 		"Accept-Language": &proto.ValueList{Value: {"en-us"}},
	// 		"Foo": &proto.ValueList{Value: {"Bar", "two"}},
	// 	}
	//
	// For incoming requests, the Host header is promoted to the
	// Request.Host field and removed from the Header map.
	//
	// HTTP defines that header names are case-insensitive. The
	// request parser implements this by using CanonicalHeaderKey,
	// making the first character and any characters following a
	// hyphen uppercase and the rest lowercase.
	//
	// For client requests, certain headers such as Content-Length
	// and Connection are automatically written when needed and
	// values in Header may be ignored. See the documentation
	// for the Request.Write method.
	Header map[string]*ValueList `protobuf:"bytes,6,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Body is the request's body.
	//
	// For client requests a nil body means the request has no
	// body, such as a GET request.
	Body []byte `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	// ContentLength records the length of the associated content.
	// The value -1 indicates that the length is unknown.
	// Values >= 0 indicate that the given number of bytes may
	// be read from Body.
	// For client requests, a value of 0 with a non-nil Body is
	// also treated as unknown.
	ContentLength int64 `protobuf:"varint,8,opt,name=contentLength" json:"contentLength,omitempty"`
	// TransferEncoding lists the transfer encodings from outermost to
	// innermost. An empty list denotes the "identity" encoding.
	// TransferEncoding can usually be ignored; chunked encoding is
	// automatically added and removed as necessary when sending and
	// receiving requests.
	TransferEncoding []string `protobuf:"bytes,9,rep,name=transferEncoding" json:"transferEncoding,omitempty"`
	// Close indicates whether to close the connection after
	// replying to this request (for servers) or after sending this
	// request and reading its response (for clients).
	//
	// For server requests, the HTTP server handles this automatically
	// and this field is not needed by Handlers.
	//
	// For client requests, setting this field prevents re-use of
	// TCP connections between requests to the same hosts, as if
	// Transport.DisableKeepAlives were set.
	Close bool `protobuf:"varint,10,opt,name=close" json:"close,omitempty"`
	// For server requests Host specifies the host on which the
	// URL is sought. Per RFC 2616, this is either the value of
	// the "Host" header or the host name given in the URL itself.
	// It may be of the form "host:port". For international domain
	// names, Host may be in Punycode or Unicode form. Use
	// golang.org/x/net/idna to convert it to either format if
	// needed.
	//
	// For client requests Host optionally overrides the Host
	// header to send. If empty, the Request.Write method uses
	// the value of URL.Host. Host may contain an international
	// domain name.
	Host string `protobuf:"bytes,11,opt,name=host" json:"host,omitempty"`
	// Form contains the parsed form data, including both the URL
	// field's query parameters and the POST or PUT form data.
	// This field is only available after ParseForm is called.
	// The HTTP client ignores Form and uses Body instead.
	FormValues map[string]*ValueList `protobuf:"bytes,12,rep,name=formValues" json:"formValues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// PostForm contains the parsed form data from POST, PATCH,
	// or PUT body parameters.
	//
	// This field is only available after ParseForm is called.
	// The HTTP client ignores PostForm and uses Body instead.
	PostFormValues map[string]*ValueList `protobuf:"bytes,13,rep,name=postFormValues" json:"postFormValues,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Trailer specifies additional headers that are sent after the request
	// body.
	//
	// For server requests the Trailer map initially contains only the
	// trailer keys, with nil values. (The client declares which trailers it
	// will later send.)  While the handler is reading from Body, it must
	// not reference Trailer. After reading from Body returns EOF, Trailer
	// can be read again and will contain non-nil values, if they were sent
	// by the client.
	//
	// For client requests Trailer must be initialized to a map containing
	// the trailer keys to later send. The values may be nil or their final
	// values. The ContentLength must be 0 or -1, to send a chunked request.
	// After the HTTP request is sent the map values can be updated while
	// the request body is read. Once the body returns EOF, the caller must
	// not mutate Trailer.
	//
	// Few HTTP clients, servers, or proxies support HTTP trailers.
	Trailer map[string]*ValueList `protobuf:"bytes,15,rep,name=trailer" json:"trailer,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// RemoteAddr allows HTTP servers and other software to record
	// the network address that sent the request, usually for
	// logging. This field is not filled in by ReadRequest and
	// has no defined format. The HTTP server in this package
	// sets RemoteAddr to an "IP:port" address before invoking a
	// handler.
	// This field is ignored by the HTTP client.
	RemoteAddr string `protobuf:"bytes,16,opt,name=remoteAddr" json:"remoteAddr,omitempty"`
	// RequestURI is the unmodified Request-URI of the
	// Request-Line (RFC 2616, Section 5.1) as sent by the client
	// to a server. Usually the URL field should be used instead.
	// It is an error to set this field in an HTTP client request.
	RequestUri string `protobuf:"bytes,17,opt,name=requestUri" json:"requestUri,omitempty"`
}

func (m *HttpRequest) Reset()                    { *m = HttpRequest{} }
func (m *HttpRequest) String() string            { return proto1.CompactTextString(m) }
func (*HttpRequest) ProtoMessage()               {}
func (*HttpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HttpRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HttpRequest) GetProto() string {
	if m != nil {
		return m.Proto
	}
	return ""
}

func (m *HttpRequest) GetProtoMajor() int32 {
	if m != nil {
		return m.ProtoMajor
	}
	return 0
}

func (m *HttpRequest) GetProtoMinor() int32 {
	if m != nil {
		return m.ProtoMinor
	}
	return 0
}

func (m *HttpRequest) GetHeader() map[string]*ValueList {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HttpRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *HttpRequest) GetContentLength() int64 {
	if m != nil {
		return m.ContentLength
	}
	return 0
}

func (m *HttpRequest) GetTransferEncoding() []string {
	if m != nil {
		return m.TransferEncoding
	}
	return nil
}

func (m *HttpRequest) GetClose() bool {
	if m != nil {
		return m.Close
	}
	return false
}

func (m *HttpRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HttpRequest) GetFormValues() map[string]*ValueList {
	if m != nil {
		return m.FormValues
	}
	return nil
}

func (m *HttpRequest) GetPostFormValues() map[string]*ValueList {
	if m != nil {
		return m.PostFormValues
	}
	return nil
}

func (m *HttpRequest) GetTrailer() map[string]*ValueList {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *HttpRequest) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *HttpRequest) GetRequestUri() string {
	if m != nil {
		return m.RequestUri
	}
	return ""
}

type HttpResponse struct {
	StatusCode int32                 `protobuf:"varint,1,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Header     map[string]*ValueList `protobuf:"bytes,2,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body       []byte                `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *HttpResponse) Reset()                    { *m = HttpResponse{} }
func (m *HttpResponse) String() string            { return proto1.CompactTextString(m) }
func (*HttpResponse) ProtoMessage()               {}
func (*HttpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HttpResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *HttpResponse) GetHeader() map[string]*ValueList {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HttpResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ValueList struct {
	Value []string `protobuf:"bytes,1,rep,name=value" json:"value,omitempty"`
}

func (m *ValueList) Reset()                    { *m = ValueList{} }
func (m *ValueList) String() string            { return proto1.CompactTextString(m) }
func (*ValueList) ProtoMessage()               {}
func (*ValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ValueList) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto1.RegisterType((*Request)(nil), "proto.Request")
	proto1.RegisterType((*Response)(nil), "proto.Response")
	proto1.RegisterType((*HttpRequest)(nil), "proto.HttpRequest")
	proto1.RegisterType((*HttpResponse)(nil), "proto.HttpResponse")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*ValueList)(nil), "proto.ValueList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Middleware service

type MiddlewareClient interface {
	ServeHTTP(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type middlewareClient struct {
	cc *grpc.ClientConn
}

func NewMiddlewareClient(cc *grpc.ClientConn) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) ServeHTTP(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.Middleware/ServeHTTP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Middleware service

type MiddlewareServer interface {
	ServeHTTP(context.Context, *Request) (*Response, error)
}

func RegisterMiddlewareServer(s *grpc.Server, srv MiddlewareServer) {
	s.RegisterService(&_Middleware_serviceDesc, srv)
}

func _Middleware_ServeHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ServeHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Middleware/ServeHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ServeHTTP(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Middleware_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServeHTTP",
			Handler:    _Middleware_ServeHTTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

func init() { proto1.RegisterFile("plugin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x6d, 0x4f, 0xd4, 0x40,
	0x10, 0x4e, 0x39, 0xee, 0xa5, 0xd3, 0x02, 0xe7, 0x62, 0xcc, 0xe6, 0x62, 0xa0, 0x34, 0x86, 0x34,
	0xc6, 0x60, 0x82, 0x89, 0x2f, 0x7c, 0x53, 0x82, 0x21, 0x11, 0x94, 0x2c, 0xe8, 0x07, 0xbf, 0x90,
	0x72, 0xbb, 0x70, 0xd5, 0x5e, 0xb7, 0xee, 0x6e, 0x31, 0xf7, 0x83, 0xfc, 0x31, 0xfe, 0x2b, 0xb3,
	0x2f, 0xd7, 0xeb, 0xc1, 0x45, 0x3f, 0x9c, 0x9f, 0x3a, 0xf3, 0xcc, 0x33, 0xcf, 0xce, 0xcc, 0x76,
	0x16, 0xc2, 0x32, 0xaf, 0x6e, 0xb2, 0x62, 0xaf, 0x14, 0x5c, 0x71, 0xd4, 0x36, 0x9f, 0xf8, 0x2b,
	0x74, 0x09, 0xfb, 0x51, 0x31, 0xa9, 0xd0, 0x0e, 0x84, 0xc2, 0x9a, 0x97, 0x55, 0x95, 0x51, 0xec,
	0x45, 0x5e, 0xe2, 0x93, 0xc0, 0x61, 0x9f, 0xab, 0x8c, 0xa2, 0x67, 0xd0, 0x75, 0x2e, 0x5e, 0x89,
	0xbc, 0x24, 0xd8, 0x47, 0x56, 0x6d, 0xef, 0x58, 0xa9, 0xd2, 0xe9, 0x90, 0x29, 0x25, 0xfe, 0xed,
	0x41, 0x8f, 0x30, 0x59, 0xf2, 0x42, 0xb2, 0x66, 0xaa, 0xf7, 0xcf, 0x54, 0xf4, 0x1c, 0x7a, 0xc2,
	0x65, 0xba, 0x93, 0x36, 0xe7, 0xe8, 0x36, 0x44, 0x6a, 0x12, 0x7a, 0x0c, 0xbe, 0x54, 0xbc, 0x3c,
	0x1c, 0xa5, 0x59, 0x81, 0x5b, 0x91, 0x97, 0xf4, 0xc8, 0x0c, 0x40, 0x4f, 0x60, 0x4d, 0xb0, 0x82,
	0x32, 0x71, 0xc8, 0x0b, 0xc5, 0x0a, 0x85, 0x57, 0x0d, 0x63, 0x1e, 0x44, 0x03, 0x7d, 0x28, 0xcd,
	0x04, 0x1b, 0x2a, 0xdc, 0x36, 0x84, 0xda, 0x8f, 0x7f, 0x75, 0x21, 0x68, 0x54, 0x8a, 0x1e, 0x41,
	0x67, 0xcc, 0xd4, 0x88, 0x4f, 0xc7, 0xe4, 0x3c, 0xd4, 0x87, 0x56, 0x25, 0x72, 0x53, 0xb3, 0x4f,
	0xb4, 0x89, 0x1e, 0x82, 0x1d, 0xb5, 0xa9, 0xca, 0x27, 0xd6, 0x41, 0x5b, 0x00, 0xc6, 0x38, 0x4d,
	0xbf, 0x71, 0x61, 0xca, 0x69, 0x93, 0x06, 0x32, 0x8b, 0x67, 0x05, 0x17, 0xa6, 0x9a, 0x3a, 0xae,
	0x11, 0xf4, 0x12, 0x3a, 0x23, 0x96, 0x52, 0x26, 0x70, 0x27, 0x6a, 0x25, 0xc1, 0xfe, 0xd6, 0xfd,
	0x69, 0xee, 0x1d, 0x1b, 0xc2, 0x51, 0xa1, 0xc4, 0x84, 0x38, 0x36, 0x42, 0xb0, 0x7a, 0xc5, 0xe9,
	0x04, 0x77, 0x23, 0x2f, 0x09, 0x89, 0xb1, 0xf5, 0x74, 0x86, 0x76, 0x04, 0x27, 0xac, 0xb8, 0x51,
	0x23, 0xdc, 0x8b, 0xbc, 0xa4, 0x45, 0xe6, 0x41, 0xf4, 0x14, 0xfa, 0x4a, 0xa4, 0x85, 0xbc, 0xd6,
	0x92, 0x43, 0x4e, 0xb3, 0xe2, 0x06, 0xfb, 0x51, 0x2b, 0xf1, 0xc9, 0x3d, 0x5c, 0xf7, 0x3c, 0xcc,
	0xb9, 0x64, 0x18, 0xcc, 0x18, 0xad, 0xa3, 0xcf, 0x1e, 0x71, 0xa9, 0x70, 0x60, 0x06, 0x61, 0x6c,
	0xf4, 0x0e, 0xe0, 0x9a, 0x8b, 0xf1, 0x97, 0x34, 0xaf, 0x98, 0xc4, 0xa1, 0xe9, 0x25, 0x5e, 0xd0,
	0xcb, 0xfb, 0x9a, 0x64, 0xfb, 0x69, 0x64, 0xa1, 0x8f, 0xb0, 0x5e, 0x72, 0xa9, 0x66, 0x14, 0xbc,
	0x66, 0x74, 0x76, 0x17, 0xe8, 0x9c, 0xcd, 0x11, 0xad, 0xd6, 0x9d, 0x6c, 0xf4, 0x06, 0xba, 0x4a,
	0xa4, 0x59, 0xce, 0x04, 0xde, 0x30, 0x42, 0xdb, 0x0b, 0x84, 0x2e, 0x2c, 0xc3, 0x2a, 0x4c, 0xf9,
	0xfa, 0xda, 0x04, 0x1b, 0x73, 0xc5, 0xde, 0x52, 0x2a, 0x70, 0xdf, 0x34, 0xda, 0x40, 0x6c, 0xdc,
	0xee, 0x93, 0xc8, 0xf0, 0x83, 0x69, 0x7c, 0x8a, 0x0c, 0x3e, 0x40, 0xd0, 0xb8, 0x35, 0xfd, 0x37,
	0x7d, 0x67, 0x13, 0xf7, 0x8b, 0x69, 0x13, 0xed, 0x42, 0xfb, 0x56, 0x57, 0xe9, 0xb6, 0xa2, 0xef,
	0x2a, 0x33, 0x95, 0x9f, 0x64, 0x52, 0x11, 0x1b, 0x3e, 0x58, 0x79, 0xed, 0x0d, 0x3e, 0xc1, 0xc6,
	0x9d, 0x56, 0x97, 0x14, 0x3c, 0x87, 0xcd, 0x05, 0xf3, 0x5b, 0x52, 0xf4, 0x04, 0xc2, 0xe6, 0x2c,
	0x97, 0x53, 0xd3, 0x6f, 0x4e, 0xd8, 0x7c, 0x22, 0xd0, 0x36, 0x04, 0x52, 0xa5, 0xaa, 0x92, 0x97,
	0x43, 0x4e, 0x99, 0x91, 0x6d, 0x13, 0xb0, 0xd0, 0x21, 0xa7, 0x0c, 0xbd, 0xaa, 0x37, 0x69, 0x65,
	0xc1, 0x65, 0x5b, 0x95, 0xbf, 0xae, 0x52, 0x6b, 0xb6, 0x4a, 0xff, 0xf5, 0xfe, 0xe2, 0x2e, 0xb4,
	0x8f, 0xc6, 0xa5, 0x9a, 0xc4, 0x3b, 0xe0, 0xd7, 0x04, 0xbd, 0x5b, 0x56, 0xc1, 0x33, 0xcb, 0x67,
	0x9d, 0xfd, 0x03, 0x80, 0xd3, 0x8c, 0xd2, 0x9c, 0xfd, 0x4c, 0x85, 0x7e, 0x6c, 0xfd, 0x73, 0x26,
	0x6e, 0xd9, 0xf1, 0xc5, 0xc5, 0x19, 0x5a, 0x77, 0x67, 0xb8, 0x3f, 0x77, 0xb0, 0x51, 0xfb, 0xb6,
	0xb9, 0xab, 0x8e, 0xf1, 0x5f, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xba, 0xfc, 0x1e, 0x21,
	0x06, 0x00, 0x00,
}
